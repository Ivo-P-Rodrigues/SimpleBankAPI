
https://stackoverflow.com/questions/20859639/using-moq-to-mock-an-asynchronous-method-for-a-unit-test
.Returns(Task.FromResult(new HttpResponseMessage(System.Net.HttpStatusCode.OK)));






        [Test]
        [TestCase(1, 1,
            1, 2,
            100, 50,
            "EUR", "EUR")]
        public async Task MakeTransferTests(
            int userId, int accountFromUserId, //user owns account?
            int accountFromId, int accountToId, //transfering to self?
            int accountFromBalance, int transferAmount, //enough balance?
            string accountFromCurrency, string accountToCurrency) //same currency?
        {
            //arrange
            var accountFrom = new Account() { AccountId = accountFromId, UserId = accountFromUserId, Balance = accountFromBalance, Currency = accountFromCurrency };

            var accountToUserId = userId + 1; //indiferent
            var accountToBalance = 100;       //indiferent
            var accountTo = new Account() { AccountId = accountToId, UserId = accountToUserId, Balance = accountToBalance, Currency = accountToCurrency };

            var transferRequest = new TransferRequest() { Amount = transferAmount, FromAccountId = accountFromId, ToAccountId = accountToId };
            var transfer = new Transfer() { FromAccountId = accountFromId, ToAccountId = accountToId };


            //arrange - validations moqs
            _unitOfWork.Setup(un => un.Accounts.GetWhere(account => account.AccountId == transferRequest.FromAccountId)).Returns(accountFrom);
            _unitOfWork.Setup(un => un.Accounts.GetWhere(account => account.AccountId == transferRequest.ToAccountId)).Returns(accountTo);
            _unitOfWork.Setup(un => un.Accounts.GetAsync(accountFromId)).ReturnsAsync(accountFrom);
            _unitOfWork.Setup(un => un.Accounts.GetAsync(accountToId)).ReturnsAsync(accountTo);
            _unitOfWork.Setup(un => un.Accounts.Exists(account => account.AccountId == transferRequest.FromAccountId)).Returns(true);
            _unitOfWork.Setup(un => un.Accounts.Exists(account => account.AccountId == transferRequest.ToAccountId)).Returns(true);

            //arrange - dummies to avoid null ref exceptions
            var movementFrom = new Movement() { };
            var movementTo = new Movement() { };
            var transferResponse = new TransferResponse();
            _unitOfWork.Setup(un => un.EntityMapper.MapRequestToTransfer(transferRequest)).Returns(transfer);
            _unitOfWork.Setup(un => un.EntityMapper.MapTransferToResponse(transfer)).Returns(transferResponse);
            _unitOfWork.Setup(un => un.Transfers.Add(transfer));
            _unitOfWork.Setup(un => un.Movements.AddRange(new[] { movementFrom, movementTo }));
            _unitOfWork.Setup(un => un.Accounts.UpdateRange(new[] { accountFrom, accountTo }));
            _unitOfWork.Setup(un => un.SaveChangesAsync());


            //act
            var result = await _transferBusiness.MakeTransfer(transferRequest, userId);

            //assert
            Assert.That(result.Item1, Is.False);
            Assert.That(result.Item2, Is.False);
            Assert.That(result.Item3, Is.Not.Null);
        }