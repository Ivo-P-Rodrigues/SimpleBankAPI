@page "/userspage"
@using SimpleBank.BlazorServerApp.Contracts
@using SimpleBank.BlazorServerApp.Data.Requests
@using SimpleBank.BlazorServerApp.Data.Responses
@using SimpleBank.BlazorServerApp.Services

@inject IUserService userService

<PageTitle>Users Page</PageTitle>

<h3>Users Page</h3>
<hr /><br />



<div style="font-size:smaller; float:left;">

    <div style="float:left; width:100%;">
        <br /><br /><br />
        <h5>Create User</h5>
        <hr /><br />
    </div>

    <div style="float:left; width:100%;">
        <div style="float:left; width:30%;">
            <EditForm Model="@createUserRequest" OnSubmit="CallAPIToCreateUser">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p>
                    <label>
                        Fullname:
                        <InputText @bind-Value="createUserRequest.Fullname" />
                    </label>
                </p>
                <p>
                    <label>
                        Username:
                        <InputText @bind-Value="createUserRequest.Username" />
                    </label>
                </p>
                <p>
                    <label>
                        Email:
                        <InputText @bind-Value="createUserRequest.Email" />
                    </label>
                </p>
                <p>
                    <label>
                        Password:
                        <InputText @bind-Value="createUserRequest.Password" />
                    </label>
                </p>
                <button type="submit">Create</button>

            </EditForm>
        </div>

        <div style="float:left; width:30%;">
            <p><strong>UserRequest</strong></p>
            <p>Email: @createUserRequest?.Email</p>
            <p>Fullname: @createUserRequest?.Fullname</p>
            <p>Password: @createUserRequest?.Password</p>
            <p>Username: @createUserRequest?.Username</p>
        </div>
        <div style="float:left; width:30%;">
            <p><strong>UserResponse</strong></p>
            <p>UserId: @createUserResponse?.UserId</p>
            <p>CreatedAt: @createUserResponse?.CreatedAt</p>
            <p>Email: @createUserResponse?.Email</p>
            <p>Fullname: @createUserResponse?.Fullname</p>
            <p>PasswordChangedAt: @createUserResponse?.PasswordChangedAt</p>
            <p>Username: @createUserResponse?.Username</p>
        </div>
    </div>
    <br />

    <button @onclick="CallAPIToLogin">
        Login
    </button>
    <br />
    <button @onclick="CallAPIToLogout">
        Logout
    </button>
    <br />

    <div>
        <p>@loginUserResponse</p><br />
        <p>@logoutResponse</p><br />
    </div>

</div>


@code {

    private CreateUserRequest createUserRequest = new(); 
    private CreateUserResponse? createUserResponse;
    private LoginUserRequest loginUserRequest = new();
    private LoginUserResponse? loginUserResponse;
    private LogoutUserRequest logoutUserRequest = new();
    private string? logoutResponse;
    private string accessToken = "";



    private async Task CallAPIToCreateUser()
    {
        createUserResponse = await userService.Create(createUserRequest);
        if(createUserResponse != null)
        {
            loginUserRequest.Username = createUserResponse.Username;
            loginUserRequest.Password = createUserRequest.Password;
        }
    }

    private async Task CallAPIToLogin()
    {
        loginUserResponse = await userService.Login(loginUserRequest);
        if (loginUserResponse != null)
        {
            accessToken = loginUserResponse.AccessToken;
            logoutUserRequest.UserTokenId = loginUserResponse.UserTokenId;
        }
    }



    private async Task CallAPIToLogout()
    {
        logoutResponse = await userService.Logout();
    }

}

@*
        LogoutUserRequest
        public Guid UserTokenId { get; set; }



*@


