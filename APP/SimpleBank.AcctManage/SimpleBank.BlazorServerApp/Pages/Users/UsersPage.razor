@page "/userspage"
@using SimpleBank.BlazorServerApp.Contracts
@using SimpleBank.BlazorServerApp.Data.Requests
@using SimpleBank.BlazorServerApp.Data.Responses
@using SimpleBank.BlazorServerApp.Pages.Users.components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<UsersPage> Loc
@inject IUserService userService

<PageTitle>@Loc["Title"]</PageTitle>

<h2>@Loc["Title"]</h2>
<hr />

@if (!userLogged)
{
    <div class="d-flex flex-wrap justify-content-center">
        <div class="px-2">
            <CreateUser></CreateUser>
        </div>
        <div class="px-2"></div>
        <div class="px-2 sm-media_margin-top">
            <LoginUser OnUserLogginIn="@OnUserLogginIn"></LoginUser>
        </div>
    </div>
}
else
{
    <ProfileUser CreateUserResponse="@createUserResponse"></ProfileUser>
    
    <LogoutUser OnUserLogginOut="@OnUserLogginOut"></LogoutUser>
}
<br /><br /><br />
<br /><br /><br />

@code {
    private bool userLogged;
    private CreateUserResponse? createUserResponse;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userLogged = await userService.CheckLocallyIfUserIsLoggedAsync();
            if (userLogged)  { createUserResponse = await userService.GetUser(); }
            StateHasChanged();
        }
    }


    public async void OnUserLogginIn(bool logged)
    {
        createUserResponse = await userService.GetUser();
        userLogged = logged;
        StateHasChanged();
    }

    public void OnUserLogginOut(bool logged) =>
        userLogged = !logged;





}


