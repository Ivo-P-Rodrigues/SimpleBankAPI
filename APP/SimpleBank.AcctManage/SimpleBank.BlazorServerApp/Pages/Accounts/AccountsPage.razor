@page "/accountspage"
@using SimpleBank.BlazorServerApp.Contracts
@using SimpleBank.BlazorServerApp.Data.Requests
@using SimpleBank.BlazorServerApp.Data.Responses
@using SimpleBank.BlazorServerApp.Pages.Accounts.components
@using SimpleBank.BlazorServerApp.Services
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<AccountsPage> Loc

@inject IAccountService accountService
@inject NavigationManager navManager

<PageTitle>@Loc["Title"]</PageTitle>

<h3>@Loc["Title"]</h3>
<hr />
<br />

<table class="table table-bordered table-striped table-hover table-responsive-lg">
    <thead class="thead-dark">
        <tr>
            <th scope="col"><strong>@Loc["AccountId"]</strong></th>
            <th scope="col"><strong>@Loc["Balance"]</strong></th>
            <th scope="col"><strong>@Loc["Currency"]</strong></th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
    </thead>
    @foreach (var account in accountsList)
    {
        <AccountItem Account="@account" OnTransferUpdateBalance="@OnTransferUpdateBalance" />
    }
</table>
<hr /><br /><br />

<CreateAccount OnAccountCreation="@OnAccountCreation"></CreateAccount>
<br /><br /><br />



@code {
    private AccountResponse account = new();
    private List<AccountResponse> accountsList = new(); 


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userLogged = await accountService.CheckLocallyIfUserIsLoggedAsync();
            if (!userLogged) { navManager.NavigateTo("/", true); return; }

            var accountsLoad = await accountService.GetAllAccounts();
            if (accountsLoad != null)
            {
                accountsList = accountsLoad.ToList();
                StateHasChanged();
            }
        }
    }


    public void OnTransferUpdateBalance(TransferResponse transferResponse)
    {
        var accountTo = accountsList.FirstOrDefault(a => a.AccountId == transferResponse.ToAccountId);
        var accountFrom = accountsList.FirstOrDefault(a => a.AccountId == transferResponse.FromAccountId);
        //no check if null here...
        accountTo!.Balance += transferResponse.Amount;
        accountFrom!.Balance -= transferResponse.Amount;

    }
    public void OnAccountCreation(AccountResponse newAccount)
    {
        accountsList.Add(newAccount);
    }




}



@*
        Account request
        public decimal Amount { get; set; }
        public string Currency { get; set; }

        Account response
        public Guid AccountId { get; set; }
        public Guid UserId { get; set; }
        public decimal Balance { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Currency { get; set; }

*@
