@page "/accountspage"
@using SimpleBank.BlazorServerApp.Contracts
@using SimpleBank.BlazorServerApp.Data.Requests
@using SimpleBank.BlazorServerApp.Data.Responses
@using SimpleBank.BlazorServerApp.Services

@inject IAccountService accountService
@inject NavigationManager navManager

<PageTitle>Accounts Page</PageTitle>

<h3>Accounts Page</h3>
<hr />
<br />

<table class="table table-sm">
    <tr>
        <th><strong>AccountId</strong></th>
        <th><strong>Balance</strong></th>
        <th><strong>Currency</strong></th>
        <th></th>
        <th></th>
    </tr>
    @foreach (var account in accountsList)
    {
        <AccountItem Account="@account" />
    }
</table>
<hr /><br /><br />

<h4>Create account</h4>
<hr /><br />
<EditForm Model="@createAccountRequest" OnSubmit="CallAPIToCreateAccount">
    <DataAnnotationsValidator />
    @*<ValidationSummary />*@

    <div>
        <label> Amount </label>
        <InputNumber @bind-Value="createAccountRequest.Amount" />
        <ValidationMessage For="@(() => createAccountRequest.Amount)"></ValidationMessage>
    </div>
    <div>
        <label> Currency: </label>
        <InputText @bind-Value="createAccountRequest.Currency" />
        <ValidationMessage For="@(() => createAccountRequest.Currency)"></ValidationMessage>
    </div>
    <button type="submit">Create</button>

</EditForm>
<hr /><br /><br />



@code {
    private AccountResponse account = new();
    private List<AccountResponse> accountsList = new(); //start empty


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userLogged = await accountService.CheckIfUserIsLogged();
            if (!userLogged) { navManager.NavigateTo("/", true); return; }

            var accountsLoad = await accountService.GetAllAccounts();
            if (accountsLoad != null)
            {
                accountsList = accountsLoad.ToList();
                StateHasChanged();
            }
        }
    }


    private CreateAccountRequest createAccountRequest = new(); //start empty

    private async Task CallAPIToCreateAccount()
    {
        var newAccount = await accountService.CreateAccount(createAccountRequest);
        if (newAccount != null)
        {
            account = newAccount;
            accountsList.Add(account);
        }
    }

}



@*
        Account request
        public decimal Amount { get; set; }
        public string Currency { get; set; }

        Account response
        public Guid AccountId { get; set; }
        public Guid UserId { get; set; }
        public decimal Balance { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Currency { get; set; }

*@
