@using SimpleBank.BlazorServerApp.Contracts
@using SimpleBank.BlazorServerApp.Data.Responses
@using SimpleBank.BlazorServerApp.Data.Requests

@inject IAccountService accountService
@inject ITransferService transferService

@*ACCOUNT*@
<tr>
    <td>@Account.AccountId</td>
    <td>@Account.Balance</td>
    <td>@Account.Currency</td>
    <td> <button type="button" data-toggle="button" aria-pressed="false" autocomplete="off" class="btn btn-dark btn-sm float-right" @onclick="() => MovimDetails(Account.AccountId)"> Movims </button> </td>
    <td> <button type="button" data-toggle="button" aria-pressed="false" autocomplete="off" class="btn btn-secondary btn-sm" @onclick="TransferDetails"> Transfer </button> </td>
</tr>

@*ACCOUNT DETAILS*@
@if (displayMovims)
{
    if (hasMovims)
    {
        <tr>
            <th scope="col">Movims:</th>
            <th scope="col">CreatedAt</th>
            <th scope="col">Amount</th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>

        @foreach (var movim in movimsList)
        {
            <MovimItem Movim="@movim"  />
        }
    }
    else
    {
        <tr>
            <td>No movims to show</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    }
}


@*TRANSFER DETAILS*@
@if (displayTransfer)
{
    <tr>
        <td>Account Id to transfer to:</td>
        <td><input placeholder="To Account Id" @bind="toAccountId" /></td>
        <td><input placeholder="Amount" @bind="amount" /></td>
        <td> <button class="btn-sm btn-outline-dark float-right" @onclick="() => MakeTransfer(Account.AccountId)"> Send </button> </td>
        <td><p style="color:@color">@msg</p></td>
    </tr>
}


@code {

    [Parameter]
    public AccountResponse Account { get; set; }

    [Parameter]
    public EventCallback<TransferResponse> OnTransferUpdateBalance { get; set; }

    private List<Movim> movimsList = new();
    private bool displayMovims = false;
    private bool hasMovims = false;
    private bool displayTransfer = false;

    private Guid toAccountId = Guid.Empty;
    private decimal amount = 0;
    private string? msg = "";
    private string? color = "";


    private async Task MovimDetails(Guid accountId)
    {
        displayTransfer = false;
        var accountsLoad = await accountService.GetAccount(accountId);

        if (accountsLoad != null && accountsLoad.Movims != null && accountsLoad?.Movims.Count != 0)
        {
            movimsList = new();
            foreach (var movim in accountsLoad.Movims)
            {
                movimsList.Add(movim);
            }
            hasMovims = true;
        }
        displayMovims = displayMovims ? false : true;
    }

    private void TransferDetails()
    {
        displayMovims = false;
        hasMovims = false;
        msg = "";
        displayTransfer = displayTransfer ? false : true;
    }

    private async Task MakeTransfer(Guid accountId)
    {
        if (amount > 0 && toAccountId != Guid.Empty)
        {
            TransferRequest transferRequest = new()
                {
                    FromAccountId = Account.AccountId,
                    ToAccountId = toAccountId,
                    Amount = amount
                };

            var response = await transferService.MakeTransfer(transferRequest);

            if (response != null)
            {
                msg = "Success!";
                color = "green";
                toAccountId = Guid.Empty;
                amount = 0;
                await OnTransferUpdateBalance.InvokeAsync(response);
            }
            else
            {
                msg = "Invalid";
                color = "red";
            }
        }
        else
        {
            msg = "Incorrect.";
            color = "red";
        }

    }



}
