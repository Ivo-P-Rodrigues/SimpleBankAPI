@using SimpleBank.AcctManage.UI.Blazor.Server.Services
@using SimpleBank.AcctManage.UI.Blazor.Server.Services.Requests
@using SimpleBank.AcctManage.UI.Blazor.Server.Services.Responses

@inject AccountService accountService

<div class="container-sm mx-auto rounded monoBox dropshadow">

    <h4>CreateAccount</h4>
    <hr />

    <EditForm Model="@createAccountRequest" OnSubmit="CallAPIToCreateAccount">
        <DataAnnotationsValidator />
        @*<ValidationSummary />*@

        <div class="form-group">
            <label for="inputAmount1">Amount:</label>
            <InputNumber class="form-control" id="inputAmount1" @bind-Value="createAccountRequest.Amount" />
            <ValidationMessage For="@(() => createAccountRequest.Amount)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="inputCurrency1">Currency:</label>
            <InputText class="form-control" id="inputCurrency1" placeholder="Currency" @bind-Value="createAccountRequest.Currency" />
            <ValidationMessage For="@(() => createAccountRequest.Currency)"></ValidationMessage>
        </div>
        <br />
        <button type="submit" class="btn btn-dark">Create</button>

    </EditForm>
</div>



@code {
    [Parameter]
    public EventCallback<AccountResponse> OnAccountCreation { get; set; }

    private CreateAccountRequest createAccountRequest = new();
    private AccountResponse account = new();

    private async Task CallAPIToCreateAccount()
    {
        var newAccount = await accountService.CreateAccount(createAccountRequest);
        if (newAccount != null)
        {
            account = newAccount;
            await OnAccountCreation.InvokeAsync(newAccount);
            //accountsList.Add(account);
        }
    }
}
