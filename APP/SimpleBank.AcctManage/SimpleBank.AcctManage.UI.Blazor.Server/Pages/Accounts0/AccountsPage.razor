@page "/accountspage"
@using SimpleBank.AcctManage.UI.Blazor.Server.Pages.Accounts0.Components
@using SimpleBank.AcctManage.UI.Blazor.Server.Services
@using SimpleBank.AcctManage.UI.Blazor.Server.Services.Responses
@inject AccountService accountService
@inject NavigationManager navManager

<PageTitle>Accounts</PageTitle>

<h3>Accounts</h3>
<hr />
<br />

@if (renderAwait)
{
    <Loading></Loading>
}
else
{
    if (accountsList?.Count == 0)
    {
        <div class="container-md rounded monoBox dropshadow mx-auto">
            <p><b>NoAccounts</b></p>
        </div>
    }
    else
    {
        <table class="table table-bordered table-striped table-responsive-lg">
            <thead class="thead-dark">
                <tr>
                    <th scope="col"><strong>AccountId</strong></th>
                    <th scope="col"><strong>Balance</strong></th>
                    <th scope="col"><strong>Currency</strong></th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            @foreach (var account in accountsList)
            {
                <AccountItem Account="@account" OnTransferUpdateBalance="@OnTransferUpdateBalance"
                    DisplayMovims="@displayMovims" OnToggleMovims="@OnToggleMovims"
                         DisplayTransfer="@displayTransfer" OnToggleTransfer="@OnToggleTransfer" />
            }
        </table>
        <hr /><br /><br />
    }

    <CreateAccount OnAccountCreation="@OnAccountCreation"></CreateAccount>
    <br /><br />
}


@code {
    private bool renderAwait = true;

    private AccountResponse account = new();
    private List<AccountResponse>? accountsList;

    protected override async Task OnInitializedAsync()
    {
        var accountsLoad = await accountService.GetAllAccounts();
        accountsList = accountsLoad == null ? new() : accountsLoad.ToList();
        renderAwait = false;
    }



    private bool displayMovims = false;
    public void OnToggleMovims(bool toggle) => displayMovims = toggle;

    private bool displayTransfer = false;
    public void OnToggleTransfer(bool toggle) => displayTransfer = toggle;

    public void OnTransferUpdateBalance(TransferResponse transferResponse)
    {
        var accountTo = accountsList.FirstOrDefault(a => a.AccountId == transferResponse.ToAccountId);
        var accountFrom = accountsList.FirstOrDefault(a => a.AccountId == transferResponse.FromAccountId);
        //no check if null here...
        accountTo!.Balance += transferResponse.Amount;
        accountFrom!.Balance -= transferResponse.Amount;
    }
    public void OnAccountCreation(AccountResponse newAccount) =>
        accountsList.Add(newAccount);


}
