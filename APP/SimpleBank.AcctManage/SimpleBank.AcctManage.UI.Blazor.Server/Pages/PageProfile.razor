@page "/profile"
@using SimpleBank.AcctManage.UI.Blazor.Server.Providers
@using SimpleBank.AcctManage.UI.Blazor.Server.Services
@using SimpleBank.AcctManage.UI.Blazor.Server.Services.Responses
@using System.Security.Claims
@inject UserService userService

@if (renderAwait)
{
    <Loading></Loading>
}
else
{
    <div class="container-md mx-auto rounded monoBox dropshadow">

        <h3>Profile</h3>

        <table class="table table-bordered table-hover table-responsive-lg">
            <tr>
                <th scope="row" class="thead-dark">User Id:</th>
                <td>@createUserResponse?.UserId</td>
            </tr>
            <tr>
                <th scope="row" class="thead-dark">Username:</th>
                <td>@createUserResponse?.Username</td>
            </tr>
            <tr>
                <th scope="row" class="thead-dark">Email:</th>
                <td>@createUserResponse?.Email</td>
            </tr>
            <tr>
                <th scope="row" class="thead-dark">Created at:</th>
                <td>@createUserResponse?.CreatedAt</td>
            </tr>
        </table>

    </div>
    <br /> <br /> <br />

    <CmptLogout ></CmptLogout>

}

@code {
    private bool renderAwait = true;
    public CreateUserResponse createUserResponse = new();

    [Inject] public ApiAuthenticationStateProvider AuthProvider { get; set; }
    [Inject] public IConfiguration Configuration { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        if (authState.User.Claims?.Count() > 0)
        {
            createUserResponse.UserId = Guid.Parse(authState.User.Claims.FirstOrDefault(c => c.Type == Configuration["ClaimsCustomKeys:userId"]).Value);
            createUserResponse.Username = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name).Value;
            createUserResponse.Email = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value;
            createUserResponse.CreatedAt = authState.User.Claims.FirstOrDefault(c => c.Type == Configuration["ClaimsCustomKeys:createdAt"]).Value;
        }
        renderAwait = false;
    }





}
